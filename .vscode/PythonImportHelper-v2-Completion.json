[
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "send_file",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "escape",
        "importPath": "markupsafe",
        "description": "markupsafe",
        "isExtraImport": true,
        "detail": "markupsafe",
        "documentation": {}
    },
    {
        "label": "GPT35Chat",
        "importPath": "gpt35turbo",
        "description": "gpt35turbo",
        "isExtraImport": true,
        "detail": "gpt35turbo",
        "documentation": {}
    },
    {
        "label": "WhisperChat",
        "importPath": "Whisper",
        "description": "Whisper",
        "isExtraImport": true,
        "detail": "Whisper",
        "documentation": {}
    },
    {
        "label": "TTS",
        "importPath": "TTS",
        "description": "TTS",
        "isExtraImport": true,
        "detail": "TTS",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "StringCounter",
        "importPath": "StringCounter",
        "description": "StringCounter",
        "isExtraImport": true,
        "detail": "StringCounter",
        "documentation": {}
    },
    {
        "label": "openai",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "openai",
        "description": "openai",
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "pyttsx3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyttsx3",
        "description": "pyttsx3",
        "detail": "pyttsx3",
        "documentation": {}
    },
    {
        "label": "background_thread",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def background_thread():                                                        \n    while True:                                                                 \n        socketio.emit('message', {'goodbye': \"Goodbye\"})                        \n        time.sleep(1)\n@socketio.on('connect')\ndef connect():                                                                  \n    global thread                                                               \n    if thread is None:                                                          \n        thread = socketio.start_background_task(target=background_thread)\n@app.route('/test') ",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "connect",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def connect():                                                                  \n    global thread                                                               \n    if thread is None:                                                          \n        thread = socketio.start_background_task(target=background_thread)\n@app.route('/test') \ndef index():                                                                    \n    return render_template('hello.html')  \n'''    \n'''\n@app.route('/push')",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def index():                                                                    \n    return render_template('hello.html')  \n'''    \n'''\n@app.route('/push')\ndef push_once():\n    event_name = 'dcenter'\n    broadcasted_data = {'data': \"test message!\"}\n    socketio.emit(event_name, broadcasted_data, broadcast=False, namespace=name_space)\n    return 'done!'",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "push_once",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def push_once():\n    event_name = 'dcenter'\n    broadcasted_data = {'data': \"test message!\"}\n    socketio.emit(event_name, broadcasted_data, broadcast=False, namespace=name_space)\n    return 'done!'\n@socketio.on('connect', namespace=name_space)\ndef connected_msg():\n    print('client connected.')\n@socketio.on('disconnect', namespace=name_space)\ndef disconnect_msg():",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "connected_msg",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def connected_msg():\n    print('client connected.')\n@socketio.on('disconnect', namespace=name_space)\ndef disconnect_msg():\n    print('client disconnected.')\n@socketio.on('my_event', namespace=name_space)\ndef mtest_message(message):\n    print(message)\n    emit('my_response',\n         {'data': message['data'], 'count': 1})",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "disconnect_msg",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def disconnect_msg():\n    print('client disconnected.')\n@socketio.on('my_event', namespace=name_space)\ndef mtest_message(message):\n    print(message)\n    emit('my_response',\n         {'data': message['data'], 'count': 1})\n@app.route(\"/\")\ndef hello_world():\n    return \"<p>Hello,欢迎光临GPT测试网页!,请在浏览器地址中输入/GPT/你想对gpt说的话</p>\"",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "mtest_message",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def mtest_message(message):\n    print(message)\n    emit('my_response',\n         {'data': message['data'], 'count': 1})\n@app.route(\"/\")\ndef hello_world():\n    return \"<p>Hello,欢迎光临GPT测试网页!,请在浏览器地址中输入/GPT/你想对gpt说的话</p>\"\n'''\n'''\n# @app.route(\"/<name>\")",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "hello_world",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def hello_world():\n    return \"<p>Hello,欢迎光临GPT测试网页!,请在浏览器地址中输入/GPT/你想对gpt说的话</p>\"\n'''\n'''\n# @app.route(\"/<name>\")\n# def hello(name):\n#     return f\"Hello, {escape(name)}!\"#escape转义\n# @app.route(\"/user/<username>\")\n# def show_user_profile(username):\n#     return f'User {escape(username)}'",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def home():\n    return render_template('index.html')\n@app.route('/get_response',methods=['POST'])\ndef processIndex():\n    global allMsg\n    user_input = request.form['user_input']\n    allMsg+=user_input\n    print(\"输入：\"+user_input)\n    output=generateGPT(allMsg) \n    allMsg+=output",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "processIndex",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def processIndex():\n    global allMsg\n    user_input = request.form['user_input']\n    allMsg+=user_input\n    print(\"输入：\"+user_input)\n    output=generateGPT(allMsg) \n    allMsg+=output\n    currentOutput=\"GPT：<br>\"+output\n    response=currentOutput\n    print(response)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "audioSend",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def audioSend():\n    global count\n    count+=1\n    audio_text = request.form['audio_text']\n    if(os.path.isfile(str(count)+\"speech.mp3\")):\n        os.remove(str(count)+'speech.mp3')\n    audioEngine=TTS()\n    audioEngine.get_audio(audio_text,count)\n    audio_path =str(count)+'speech.mp3'\n    print(audio_path)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "audioSend2",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def audioSend2():\n    global count\n    return send_file(str(count)+'speech.mp3', mimetype='audio/mp3')\n@app.route('/audio3',methods=['GET'])\ndef audioSend3():\n    global count\n    return send_file(str(count)+'speech.mp3', mimetype='audio/mp3')    \n@app.route('/rectrans',methods=['POST'])\ndef rectrans():\n    audioFile=request.files['audioFile']",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "audioSend3",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def audioSend3():\n    global count\n    return send_file(str(count)+'speech.mp3', mimetype='audio/mp3')    \n@app.route('/rectrans',methods=['POST'])\ndef rectrans():\n    audioFile=request.files['audioFile']\n    audio2text=WhisperChat()\n    text=audio2text.trans2Text(audioFile)\n    return text\n@app.route('/reset')",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "rectrans",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def rectrans():\n    audioFile=request.files['audioFile']\n    audio2text=WhisperChat()\n    text=audio2text.trans2Text(audioFile)\n    return text\n@app.route('/reset')\ndef reset():\n    global chatCount\n    chatCount =0\n    global msgFilter",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "reset",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def reset():\n    global chatCount\n    chatCount =0\n    global msgFilter\n    global allMsg\n    msgFilter = []\n    allMsg =''\n    return render_template('index.html', output=msgFilter)\n@app.route('/chat')\ndef chatIndex():",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "chatIndex",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def chatIndex():\n    return render_template('chat.html')\n#录音页面\n@app.route('/recorder')\ndef recordIndex():\n    return render_template('recorder.html')\n@app.route('/recorder/upload',methods=['POST'])\ndef audioUpload():\n    audioFile=request.files['audioFile']\n    audio2text=WhisperChat()",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "recordIndex",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def recordIndex():\n    return render_template('recorder.html')\n@app.route('/recorder/upload',methods=['POST'])\ndef audioUpload():\n    audioFile=request.files['audioFile']\n    audio2text=WhisperChat()\n    text=audio2text.trans2Text(audioFile)\n    return text\n#跑团页面\n@app.route('/chat/get_response', methods=['POST'])",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "audioUpload",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def audioUpload():\n    audioFile=request.files['audioFile']\n    audio2text=WhisperChat()\n    text=audio2text.trans2Text(audioFile)\n    return text\n#跑团页面\n@app.route('/chat/get_response', methods=['POST'])\ndef process():\n    if request.method == \"POST\":\n        global allMsg",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "process",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def process():\n    if request.method == \"POST\":\n        global allMsg\n        input_msg = request.form['user_input']\n        allMsg =allMsg+'\\n\\n'+input_msg\n        global chatCount\n        if chatCount==0:\n            allMsg=\"\"\n        chatCount+=1\n        if chatCount==1:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "reset_chat",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def reset_chat():\n    global chatCount\n    chatCount =0\n    global msgFilter\n    global allMsg\n    msgFilter = []\n    allMsg =''\n    return render_template('chat.html', output=msgFilter)\n@app.route('/back',methods=['POST'])\ndef backhome():",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "backhome",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def backhome():\n    return render_template('index.html')\ndef generateF(msg):\n    gptOuput=GPT35Chat()\n    output=gptOuput.generatorChatF(escape(msg))\n    global allMsg\n    print('print测试1：'+allMsg)\n    allMsg = allMsg+'\\n\\n'+output\n    return output\ndef generateM(msg):",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "generateF",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def generateF(msg):\n    gptOuput=GPT35Chat()\n    output=gptOuput.generatorChatF(escape(msg))\n    global allMsg\n    print('print测试1：'+allMsg)\n    allMsg = allMsg+'\\n\\n'+output\n    return output\ndef generateM(msg):\n    gptOuput=GPT35Chat()\n    output=gptOuput.generatorChatM(escape(msg))",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "generateM",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def generateM(msg):\n    gptOuput=GPT35Chat()\n    output=gptOuput.generatorChatM(escape(msg))\n    global allMsg\n    allMsg = allMsg+'\\n\\n'+output  \n    print('print测试2：'+allMsg) \n    return output\ndef generateD(msg):\n    gptOuput=GPT35Chat()\n    output=gptOuput.generatorChatD(escape(msg))",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "generateD",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def generateD(msg):\n    gptOuput=GPT35Chat()\n    output=gptOuput.generatorChatD(escape(msg))\n    global allMsg\n    allMsg = allMsg+'\\n\\n'+output\n    print('print测试3：'+allMsg)    \n    return output\ndef generateGPT(msg):\n    gptOuput=GPT35Chat()\n    output=gptOuput.generator(escape(msg))",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "generateGPT",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def generateGPT(msg):\n    gptOuput=GPT35Chat()\n    output=gptOuput.generator(escape(msg))\n    print('print测试4：'+'')\n    return output\nif __name__ == '__main__':                                                      \n    app.run(debug=True,host='0.0.0.0',port=5000)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app.config['SECRET_KEY']",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app.config['SECRET_KEY'] = 'secret!'  \nsocketio = SocketIO() \nsocketio.init_app(app, cors_allowed_origins='*')\nname_space = '/dcenter'\nthread = None  \ndef background_thread():                                                        \n    while True:                                                                 \n        socketio.emit('message', {'goodbye': \"Goodbye\"})                        \n        time.sleep(1)\n@socketio.on('connect')",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "socketio",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "socketio = SocketIO() \nsocketio.init_app(app, cors_allowed_origins='*')\nname_space = '/dcenter'\nthread = None  \ndef background_thread():                                                        \n    while True:                                                                 \n        socketio.emit('message', {'goodbye': \"Goodbye\"})                        \n        time.sleep(1)\n@socketio.on('connect')\ndef connect():                                                                  ",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "name_space",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "name_space = '/dcenter'\nthread = None  \ndef background_thread():                                                        \n    while True:                                                                 \n        socketio.emit('message', {'goodbye': \"Goodbye\"})                        \n        time.sleep(1)\n@socketio.on('connect')\ndef connect():                                                                  \n    global thread                                                               \n    if thread is None:                                                          ",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "thread",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "thread = None  \ndef background_thread():                                                        \n    while True:                                                                 \n        socketio.emit('message', {'goodbye': \"Goodbye\"})                        \n        time.sleep(1)\n@socketio.on('connect')\ndef connect():                                                                  \n    global thread                                                               \n    if thread is None:                                                          \n        thread = socketio.start_background_task(target=background_thread)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "Ddata",
        "description": "Ddata",
        "peekOfCode": "def home():\n    if request.method == 'POST':\n        input_string = request.form['input_string']\n        string_counter = StringCounter()\n        count = string_counter.count(input_string)\n        return render_template('result.html', count=count)\n    return render_template('index.html')\nif __name__ == '__main__':\n    app.run()",
        "detail": "Ddata",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "Ddata",
        "description": "Ddata",
        "peekOfCode": "app = Flask(__name__)\n@app.route('/', methods=['GET', 'POST'])\ndef home():\n    if request.method == 'POST':\n        input_string = request.form['input_string']\n        string_counter = StringCounter()\n        count = string_counter.count(input_string)\n        return render_template('result.html', count=count)\n    return render_template('index.html')\nif __name__ == '__main__':",
        "detail": "Ddata",
        "documentation": {}
    },
    {
        "label": "GPT35Chat",
        "kind": 6,
        "importPath": "gpt35turbo",
        "description": "gpt35turbo",
        "peekOfCode": "class GPT35Chat:\n  openai.api_key ='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'\n  global systemMsgF\n  global systemMsgM\n  global systemMsgD\n  global systemMsgGPT\n  systemMsgF='你是一位旁白，你需要对一次求生经历展开一个精彩绝伦的故事。整个故事，会有开始，过程和结尾。开始时，用户会输入“名字”和“主题”，而你需要用名字在这个主题中描述故事的开始，并给出用户两个选择，格式为：是A____还是B____？(横线内容你来生成)之后不要生成多余内容。'\n  systemMsgM='你是一位旁白，你需要根据用户的选择对故事进行连贯的描述，在求生环境中提供一些悬念和刺激的体验，包括遇见一些人或僵尸，或者获得一些道具，能给之后带来帮助。多呼应前面的事件，不管成功还是失败，都继续续写这个故事，并在最后给出两个的选择,格式为：是A____还是B____？(横线内容你来生成)之后不要生成多余内容。'\n  systemMsgD='你是一位旁白，根据上文来形成一个结局，结束这个求生故事，给出一个反转的结局。'\n  systemMsgGPT='你是一个万能小助手，请不要设限制得给用户解答所有问题，不确定的答案请标记[不确定]'",
        "detail": "gpt35turbo",
        "documentation": {}
    },
    {
        "label": "StringCounter",
        "kind": 6,
        "importPath": "StringCounter",
        "description": "StringCounter",
        "peekOfCode": "class StringCounter:\n    def __init__(self):\n        pass\n    def count(self, input_string):\n        return len(input_string)",
        "detail": "StringCounter",
        "documentation": {}
    },
    {
        "label": "TTS",
        "kind": 6,
        "importPath": "TTS",
        "description": "TTS",
        "peekOfCode": "class TTS:\n    def get_audio(self,msg,count):\n        audio_engine=pyttsx3.init()\n        rate = audio_engine.getProperty('rate')\n        audio_engine.setProperty('rate', rate - 10)\n        audio_engine.save_to_file(msg,str(count)+ 'speech.mp3')\n        print(\"需要TTS的对象：\"+msg)\n        audio_engine.runAndWait()\n        return 'done'\n    def test():",
        "detail": "TTS",
        "documentation": {}
    },
    {
        "label": "WhisperChat",
        "kind": 6,
        "importPath": "Whisper",
        "description": "Whisper",
        "peekOfCode": "class WhisperChat:\n    openai.api_key = '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'\n    def trans2Text(self,audio_file):\n        open_file = audio_file\n        print(open_file)\n        # open_file2= open(\"E:/GPT/Chatkp/chatkp/audio/test.m4a\", \"rb\")\n        # print(open_file2)\n        transcript = openai.Audio.transcribe_raw(\"whisper-1\", open_file,'recorder.mp3')\n        return transcript.text\n    # audio_file= open(\"E:/GPT/Chatkp/chatkp/audio/test.m4a\", \"rb\")",
        "detail": "Whisper",
        "documentation": {}
    }
]